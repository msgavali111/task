package com.site.myproj.core.models;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.Optional;
import org.apache.sling.models.annotations.injectorspecific.Self;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

import javax.annotation.PostConstruct;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

@Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class GlobalFooterActionLinks {

    @Self
    private Resource resource;

    @ValueMapValue
    @Optional
    private String contentFragmentPath;

    private List<ActionLinkItem> actionLinkItems;

    @PostConstruct
    protected void init() {
        // Ensure the content fragment path is provided and not empty
        if (contentFragmentPath != null && !contentFragmentPath.isEmpty()) {
            ResourceResolver resourceResolver = resource.getResourceResolver();
            Resource cfResource = resourceResolver.getResource(contentFragmentPath + "/jcr:content/data/master");

            // Proceed if the content fragment resource is found
            if (cfResource != null) {
                ValueMap valueMap = cfResource.getValueMap();
                String[] jsonItems = valueMap.get("actionLinkItems", String[].class);

                // Proceed if the actionLinkItems property is found
                if (jsonItems != null) {
                    ObjectMapper objectMapper = new ObjectMapper();
                    try {
                        // Join the JSON array items into a single JSON array string
                        String jsonArrayString = "[" + String.join(",", jsonItems) + "]";
                        actionLinkItems = objectMapper.readValue(jsonArrayString, new TypeReference<List<ActionLinkItem>>() {});
                    } catch (IOException e) {
                        // Handle JSON parsing exceptions
                        handleJsonParsingException(e);
                    }
                }
            }
        }
    }

    // Returns the list of action link items, or an empty list if none are found
    public List<ActionLinkItem> getActionLinkItems() {
        return actionLinkItems != null ? actionLinkItems : Collections.emptyList();
    }

    // Method to handle JSON parsing exceptions
    private void handleJsonParsingException(IOException e) {
        // Custom error handling logic (e.g., logging, alerting, etc.)
        throw new RuntimeException("Error parsing JSON array", e);
    }
}
